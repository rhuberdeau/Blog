require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

RSpec.describe AdminController, :type => :controller do
  # This should return the minimal set of attributes required to create a valid
  # AdminController. As you add validations to AdminController, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) { {  } }

  describe "GET index" do
    before do
      article1 = Article.create!(title: "This is article 1", summary: "An article", body: "This is the article body", user_id: 1 )
      article2 = Article.create!(title: "This is article 2", summary: "An article", body: "This is the article body", user_id: 1, published: true )
      article3 = Article.create!(title: "This is article 3", summary: "An article", body: "This is the article body", user_id: 1 )
    end

    context "when an admin is logged in" do
      let(:user) {FactoryGirl.create(:user, admin: true) }
      before { sign_in user }

      it "assigns all unpublished articles as @articles" do
        get :index
        assigns(:articles).should eq(Article.where(published: false))
      end
    end

    context "when an admin is not logged in" do
      it "redirects the user " do
        get :index
        expect(response.status).to eq(302)
      end
    end
  end
end
